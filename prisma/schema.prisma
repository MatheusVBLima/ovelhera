generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Video {
  id    String @id @default(cuid())
  title String
  url   String
  tags  Tag[]

  @@map("videos")
}

model Song {
  id    String @id @default(cuid())
  title String
  url   String

  @@map("songs")
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  videos Video[]

  @@map("tag")
}

model Enemy {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  @@map("enemy")
}

model LogsVideo {
  id     String @id @default(cuid())
  name   String
  action String
  url    String
  date   String

  @@map("logsvideo")
}

model LogsVengeance {
  id     String @id @default(cuid())
  name   String
  action String
  enemy  String
  date   String

  @@map("logsvengeance")
}

model LogsSong {
  id     String @id @default(cuid())
  name   String
  action String
  url    String
  date   String

  @@map("logssong")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  category  String
  option    String
  createdAt DateTime @default(now())
}
